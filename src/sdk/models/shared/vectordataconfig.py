"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import distance_enum as shared_distance_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VectorDataConfig:
    r"""Config of single vector data storage"""
    
    distance: shared_distance_enum.DistanceEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance') }})
    r"""Type of internal tags, build from payload Distance function types used to compare vectors"""
    size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})
    r"""Size of a vectors used"""
    hnsw_config: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hnsw_config'), 'exclude': lambda f: f is None }})
    r"""Vector specific HNSW config that overrides collection config"""
    quantization_config: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantization_config'), 'exclude': lambda f: f is None }})
    r"""Vector specific quantization config that overrides collection config"""
    