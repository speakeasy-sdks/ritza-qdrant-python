"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CollectionParams:
    
    vectors: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vectors') }})

    r"""Vector params separator for single and multiple vector modes Single mode:
    
    { \"size\": 128, \"distance\": \"Cosine\" }
    
    or multiple mode:
    
    { \"default\": { \"size\": 128, \"distance\": \"Cosine\" } }
    """
    on_disk_payload: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('on_disk_payload'), 'exclude': lambda f: f is None }})

    r"""If true - point's payload will not be stored in memory. It will be read from the disk every time it is requested. This setting saves RAM by (slightly) increasing the response time. Note: those payload values that are involved in filtering and are indexed - remain in RAM."""
    replication_factor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replication_factor'), 'exclude': lambda f: f is None }})

    r"""Number of replicas for each shard"""
    shard_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shard_number'), 'exclude': lambda f: f is None }})

    r"""Number of shards the collection has"""
    write_consistency_factor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('write_consistency_factor'), 'exclude': lambda f: f is None }})

    r"""Defines how many replicas should apply the operation for us to consider it successful. Increasing this number will make the collection more resilient to inconsistencies, but will also make it fail if not enough replicas are available. Does not have any performance impact."""
    