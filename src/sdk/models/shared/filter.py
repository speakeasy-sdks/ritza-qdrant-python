"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class Filter:
    r"""Look only for points which satisfies this conditions"""
    must: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('must'), 'exclude': lambda f: f is None }})
    r"""All conditions must match"""
    must_not: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('must_not'), 'exclude': lambda f: f is None }})
    r"""All conditions must NOT match"""
    should: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('should'), 'exclude': lambda f: f is None }})
    r"""At least one of those conditions should match"""
    

