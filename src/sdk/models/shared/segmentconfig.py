"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import hnswconfig as shared_hnswconfig
from ..shared import vectordataconfig as shared_vectordataconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class SegmentConfigIndex2TypeEnum(str, Enum):
    HNSW = 'hnsw'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentConfigIndex2:
    r"""Use filterable HNSW index for approximate search. Is very fast even on a very huge collections, but require additional space to store index and additional time to build it."""
    
    options: shared_hnswconfig.HnswConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""Config of HNSW index"""  
    type: SegmentConfigIndex2TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class SegmentConfigIndex1TypeEnum(str, Enum):
    PLAIN = 'plain'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentConfigIndex1:
    r"""Do not use any index, scan whole vector collection during search. Guarantee 100% precision, but may be time consuming on large collections."""
    
    options: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})  
    type: SegmentConfigIndex1TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class SegmentConfigPayloadStorageType2TypeEnum(str, Enum):
    ON_DISK = 'on_disk'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentConfigPayloadStorageType2:
    r"""Type of payload storage"""
    
    type: SegmentConfigPayloadStorageType2TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class SegmentConfigPayloadStorageType1TypeEnum(str, Enum):
    IN_MEMORY = 'in_memory'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentConfigPayloadStorageType1:
    r"""Type of payload storage"""
    
    type: SegmentConfigPayloadStorageType1TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class SegmentConfigStorageType2TypeEnum(str, Enum):
    MMAP = 'mmap'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentConfigStorageType2:
    r"""Type of vector storage"""
    
    type: SegmentConfigStorageType2TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class SegmentConfigStorageType1TypeEnum(str, Enum):
    IN_MEMORY = 'in_memory'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentConfigStorageType1:
    r"""Type of vector storage"""
    
    type: SegmentConfigStorageType1TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentConfig:
    
    index: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index') }})
    r"""Vector index configuration of the segment"""  
    storage_type: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage_type') }})
    r"""Type of vector storage"""  
    vector_data: dict[str, shared_vectordataconfig.VectorDataConfig] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vector_data') }})  
    payload_storage_type: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload_storage_type'), 'exclude': lambda f: f is None }})
    r"""Type of payload storage"""  
    quantization_config: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantization_config'), 'exclude': lambda f: f is None }})
    r"""Quantization parameters. If none - quantization is disabled."""  
    