"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from ..shared import errorresponse as shared_errorresponse
from ..shared import messagesenderrors as shared_messagesenderrors
from ..shared import peerinfo as shared_peerinfo
from ..shared import raftinfo as shared_raftinfo
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class ClusterStatus200ApplicationJSONResult2ConsensusThreadStatus3ConsensusThreadStatus(str, Enum):
    STOPPED_WITH_ERR = 'stopped_with_err'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterStatus200ApplicationJSONResult2ConsensusThreadStatus3:
    r"""Information about current consensus thread status"""
    
    consensus_thread_status: ClusterStatus200ApplicationJSONResult2ConsensusThreadStatus3ConsensusThreadStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consensus_thread_status') }})
    err: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('err') }})
    
class ClusterStatus200ApplicationJSONResult2ConsensusThreadStatus2ConsensusThreadStatus(str, Enum):
    STOPPED = 'stopped'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterStatus200ApplicationJSONResult2ConsensusThreadStatus2:
    r"""Information about current consensus thread status"""
    
    consensus_thread_status: ClusterStatus200ApplicationJSONResult2ConsensusThreadStatus2ConsensusThreadStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consensus_thread_status') }})
    
class ClusterStatus200ApplicationJSONResult2ConsensusThreadStatus1ConsensusThreadStatus(str, Enum):
    WORKING = 'working'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterStatus200ApplicationJSONResult2ConsensusThreadStatus1:
    r"""Information about current consensus thread status"""
    
    consensus_thread_status: ClusterStatus200ApplicationJSONResult2ConsensusThreadStatus1ConsensusThreadStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consensus_thread_status') }})
    last_update: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_update'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    
class ClusterStatus200ApplicationJSONResult2Status(str, Enum):
    ENABLED = 'enabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterStatus200ApplicationJSONResult2:
    r"""Description of enabled cluster"""
    
    consensus_thread_status: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consensus_thread_status') }})
    r"""Information about current consensus thread status"""
    message_send_failures: dict[str, shared_messagesenderrors.MessageSendErrors] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_send_failures') }})
    r"""Consequent failures of message send operations in consensus by peer address. On the first success to send to that peer - entry is removed from this hashmap."""
    peer_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peer_id') }})
    r"""ID of this peer"""
    peers: dict[str, shared_peerinfo.PeerInfo] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peers') }})
    r"""Peers composition of the cluster with main information"""
    raft_info: shared_raftinfo.RaftInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raft_info') }})
    r"""Summary information about the current raft state"""
    status: ClusterStatus200ApplicationJSONResult2Status = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    
class ClusterStatus200ApplicationJSONResult1Status(str, Enum):
    DISABLED = 'disabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterStatus200ApplicationJSONResult1:
    r"""Information about current cluster status and structure"""
    
    status: ClusterStatus200ApplicationJSONResult1Status = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    
class ClusterStatus200ApplicationJSONStatus(str, Enum):
    OK = 'ok'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterStatus200ApplicationJSON:
    r"""successful operation"""
    
    result: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""Information about current cluster status and structure"""
    status: Optional[ClusterStatus200ApplicationJSONStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""Time spent to process this request"""
    

@dataclasses.dataclass
class ClusterStatusResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    cluster_status_200_application_json_object: Optional[ClusterStatus200ApplicationJSON] = dataclasses.field(default=None)
    r"""successful operation"""
    error_response: Optional[shared_errorresponse.ErrorResponse] = dataclasses.field(default=None)
    r"""error"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    